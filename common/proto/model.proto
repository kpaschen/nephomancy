syntax = "proto3";

package model;
option go_package = ".;resources";

import "google/protobuf/any.proto";

// Location says where in the world you want a resource to be located.
// You do not have to specify a location, though having at least the
// global_region or the continent is helpful.
// If you specify more than one field, they need to be consistent.
// If you specify a country, you will only be able to see costs for providers
// serving that country. If you wish to specify a particular location only for
// particular providers, you need to select the correct region/zone in the
// provider details instead.
message Location {
  string global_region = 1; // APAC, EMEA, LATAM, NAM
  string continent = 2; // Asia, Africa, Australia, Europe, NorthAmerica, SouthAmerica
  string country_code = 3;  // ISO 2-letter country code
  // TODO: esp. for country_code US, may want better subdivision
}

// MachineType contains specs for a physical or virtual machine (aka an Instance).
message MachineType {
  uint32 cpu_count = 1;
  uint32 memory_gb = 2;
  uint32 gpu_count = 3;
  // Probably want something like preemptibility and sole tenancy here as well.
}

// A Volume is a block storage resource. Commonly known as a "Disk" or "Hard drive".
// Almost all providers will let you select "SSD" or "Not SSD", aka "Standard".
message DiskType {
  uint32 size_gb = 1;
  string disk_tech = 2;  // SSD or Standard
  // need an enum or a flag for whether this is replicated.
}

// Operating system image.
message Image {
  string name = 1;
  uint32 size_gb = 2;
  map<string, google.protobuf.Any> provider_details = 4;
}

// An instance is a virtual machine (VM) or a physical machine (sometimes called a Node).
// TODO: maybe add external ip addresses here? At least temporary/ephemeral ones live
// only with the VM. But static/permanent ones probably belong on the Network resource.
message Instance {
  Location location = 1;
  MachineType type = 2;
  // You can have one detail per provider. The common VM is a spec; the provider
  // details should meet the spec.
  // If you fill in provider details, they need to meet the spec, otherwise the
  // system will complain.
  // If you only supply the spec and ask the system to fill in provider details,
  // it will attempt to find a match for the spec. This will fail if the provider
  // does not offer anything matching (e.g. if you ask for a country that the
  // provider does not serve). Otherwise, it will select the smallest machine type
  // offered by the provider in the location you specified that meets your spec.
  // If there are several such machine types (e.g. there are matches from both
  // gcloud's n2 and e2 series), there is a provider-specific ranking of which
  // machine types the system prefers, based on what is considered "generally most
  // cost effective" (but note this is just a heuristic).
  map<string, google.protobuf.Any> provider_details = 3;
}

// An Instance set collects similar instances. All the instances in the set are
// represented by the template entry. This is so you can have multiple instances
// of the same machine type in the same location without getting many identical
// lines in the cost report.
message InstanceSet {
  string name = 1;  // The name is just for display purposes.
  Instance template = 2;
  uint32 count = 3;
  // for cost estimate: how many hours/month do you expect this vm to be running.
  // When this is not set, cost estimate will be based on running continuously.
  // AWS use 730 hours/month for "always on"
  uint32 usage_hours_per_month = 4;
}

// This is block storage.
message Disk {
  Location location = 1;
  DiskType type = 2; 
  // the size in the disk type is the maximum size for the disk. The actual
  // size here is what you configure when you create it. ActualSizeGb <= type.SizeGb.
  uint64 actual_size_gb = 3;
  // For now, a disk can have 0 or 1 image on it.
  Image image = 4;
  // You can have one detail per provider.
  map<string, google.protobuf.Any> provider_details = 5;
}

// Disks with the same location, type, and actual size
message DiskSet {
  string name = 1; // Just for display
  Disk template = 2;
  uint32 count = 3;
  // for cost estimate: how much of the available space do you expect to be using (avg per month)
  // When this is not set, the cost estimate will be based on full usage.
  uint32 percent_used_avg = 4;
}

// Some providers create default subnetworks for you automatically (gcloud),
// others only explicitly have "subnets" in VPCs (AWS).
// For this model, a subnetwork exists for every region that has at least one
// Instance in it. Yes you could have multiple networks and subnetworks in each
// region, and your Instances could be on one or more of them; but for the purposes
// of cost estimation, what matters is which regions have ingress-consuming or
// egress-producing stuff in them. So a Subnetwork is basically a location with
// a bandwidth usage spec.
message Subnetwork {
  string name = 1;
  Location location = 2;
  // for cost estimate: total gbits per month per subnetwork
  // Note that there are provider-specific caps and quota settings
  // that may apply and cause your effective bandwidth to be lower.
  uint64 ingress_gbits_per_month = 3;
  uint64 external_egress_gbits_per_month = 4;
  uint64 internal_egress_gbits_per_month = 5;
  // You can have one detail per provider.
  map<string, google.protobuf.Any> provider_details = 6;
}

// Load balancers should probably be listed here. Firewalls too.
// IP Addresses are usually attached to an Instance, so should be handled there.
message Network {
  string name = 1;
  repeated Subnetwork subnetworks = 2;
  // there are types of network (e.g. vpn), but the names and the implications
  // for billing vary by cloud provider.
  // You can have one detail per provider.
  map<string, google.protobuf.Any> provider_details = 3;
}

message Project {
  string name = 1;

  // Instances and Disks are "Compute" resources
  repeated InstanceSet instance_sets = 2;
  repeated DiskSet disk_sets = 3;

  // Network resources include ip addresses, load balancers, bandwidth, firewall rules
  repeated Network networks = 5;

  // Other resources not handled yet: Storage (Object storage -- S3 buckets);
  // Services (e.g. Kubernetes, Stackdriver, hosted services.
  // Maybe container services separate from that?
  // Not sure where licenses would go yet.
}
