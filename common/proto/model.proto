syntax = "proto3";

package model;
option go_package = ".;resources";

import "google/protobuf/any.proto";

// Location says where in the world you want a resource to be located.
// You do not have to specify a location, though having at least the
// global_region or the continent is helpful.
// If you specify more than one field, they need to be consistent.
// If you specify a country, you will only be able to see costs for providers
// serving that country. If you wish to specify a particular location only for
// particular providers, you need to select the correct region/zone in the
// provider details instead.
message Location {
  string global_region = 1; // APAC, EMEA, LATAM, NAM
  string continent = 2; // Asia, Africa, Australia, Europe, NorthAmerica, SouthAmerica
  string country_code = 3;  // ISO 2-letter country code
}

// MachineType contains specs for a physical or virtual machine (aka an Instance).
message MachineType {
  uint32 cpu_count = 1;
  uint32 memory_gb = 2;
  uint32 gpu_count = 3;

  // could have a field here for whether this machine type supports
  // local disks and whether it's nvme, scsi, or both.
  // But not all providers have this feature, so maybe better only on
  // specific provider details?
  // Dito for other features like cpu architecture.
}

// A Volume is a block storage resource. Commonly known as a "Disk" or "Hard drive".
// Almost all providers will let you select "SSD" or "Not SSD", aka "Standard".
message DiskType {
  uint32 size_gb = 1;
  string disk_tech = 2;  // SSD or Standard
}

// Custom image or snapshot.
message Image {
  string name = 1;
  uint32 size_gb = 2;
  map<string, google.protobuf.Any> provider_details = 4;
}

// An instance is a virtual machine (VM) or a physical machine (sometimes called a Node).
message Instance {
  Location location = 1;
  MachineType type = 2;
  // Operating System. Leave this blank if you want a default choice. Where a free OS is
  // offered, the default choice will be free. Some providers only offer OS choices that
  // come with a license fee.
  string os = 3;
  // If the provider permits local storage, these are the local disks.
  // These are separate from the disks contained in DiskSets; the latter are independent
  // of Instances.
  // Not all providers support local disks. Even those that do, don't support
  // them for all choices of machine type. When in doubt, specify your
  // block storage requirements in a DiskSet rather than here. 
  repeated Disk local_storage = 4;

  // Probably want something like preemptibility and sole tenancy here as well.
  // reservations / ondemand need to be in provider details.

  // You can have one detail per provider. The common VM is a spec; the provider
  // details should meet the spec.
  // If you fill in provider details, they need to meet the spec, otherwise the
  // system will complain.
  // If you only supply the spec and ask the system to fill in provider details,
  // it will attempt to find a match for the spec. This will fail if the provider
  // does not offer anything matching (e.g. if you ask for a country that the
  // provider does not serve). Otherwise, it will select the smallest machine type
  // offered by the provider in the location you specified that meets your spec.
  // If there are several such machine types (e.g. there are matches from both
  // gcloud's n2 and e2 series), there is a provider-specific ranking of which
  // machine types the system prefers, based on what is considered "generally most
  // cost effective" (but note this is just a heuristic).
  map<string, google.protobuf.Any> provider_details = 5;
}

// An Instance set collects similar instances. All the instances in the set are
// represented by the template entry. This is so you can have multiple instances
// of the same machine type in the same location without getting many identical
// lines in the cost report.
message InstanceSet {
  string name = 1;  // The name is just for display purposes.
  Instance template = 2;
  uint32 count = 3;
  // for cost estimate: how many hours/month do you expect this vm to be running.
  // When this is not set, cost estimate will be based on running continuously,
  // equivalent to 730 hours/month.
  uint32 usage_hours_per_month = 4;
}

// This is block storage.
message Disk {
  Location location = 1;
  DiskType type = 2; 
  Image image = 3;
  // You can have one detail per provider.
  map<string, google.protobuf.Any> provider_details = 4;
}

// Disks with the same location, type, and actual size
message DiskSet {
  string name = 1; // Just for display
  Disk template = 2;
  uint32 count = 3;
  // Use this to express that the disk only exists for part
  // of a month.
  uint32 usage_hours_per_month = 4;
}

// This is any or all of: external load balancer, firewall, nat gateway
message Gateway {
  map<string, google.protobuf.Any> provider_details = 1;
}

message Network {
  string name = 1;

  repeated Subnetwork subnetworks = 2;

  // there are types of network (e.g. vpn), but the names and the implications
  // for billing vary by cloud provider.
  // You can have one detail per provider.
  map<string, google.protobuf.Any> provider_details = 3;
}

// A Google project will have a default network and (usually) at least one subnetwork
// for each region that it uses. If you just go with the defaults, you'll actually
// get subnetworks created for every public region automatically.
// On AWS, you have a default VPC in each AWS Region, probably with subnets in
// several availability zones.
// On cloud providers that do not have subnets, nephomancy will attach one default
// subnetwork to each network, in order to hold objects such as ip addresses and gateways.
message Subnetwork {
  string name = 1;
  Location location = 2;

  // These are permanent external ip addresses.
  int32 ip_addresses = 3;
  repeated Gateway gateways = 4;

  // internet bandwidth in Mbit/s. If you need this broken down by region,
  // specify it on the relevant subnetworks instead.
  // Also note this is your max bandwidth capacity. The gbits_per_month
  // values on the subnetworks are how much you actually transfer.
  uint32 bandwidth_mbits = 5;

  // Total per month. This is in gbits for consistency with the mbits
  // in the bandwidth. This is how much you actually transfer. Note some
  // providers give their costs and bills in gibibytes / month.
  // 1 gibibyte = 8 * 1024 / 1000 gbits.
  uint64 ingress_gbits_per_month = 6;
  uint64 external_egress_gbits_per_month = 7;
  uint64 internal_egress_gbits_per_month = 8;

  map<string, google.protobuf.Any> provider_details = 9;
}

message Project {
  string name = 1;

  // Instances and Disks are "Compute" resources
  repeated InstanceSet instance_sets = 2;
  repeated DiskSet disk_sets = 3;

  // Network resources include ip addresses, load balancers, bandwidth, firewall rules
  repeated Network networks = 5;

  map<string, google.protobuf.Any> provider_details = 6;

  // Other resources not handled yet: Storage (Object storage -- S3 buckets);
  // Services (e.g. Kubernetes, Stackdriver, hosted services.
  // Maybe container services separate from that?
}
