// DCS-specific extensions for the asset model.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: dcs_model.proto

package resources

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// DCS has an OS License tied to each VM.
// DCS cost reporting uses "CU", which are 0.1GHz worth of a CPU.
// However, the costs in the pdf I used as basis here are for
// 1vCPU, corresponding to 10 CU.
type DcsVM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsChoice string `protobuf:"bytes,1,opt,name=os_choice,json=osChoice,proto3" json:"os_choice,omitempty"`
}

func (x *DcsVM) Reset() {
	*x = DcsVM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_model_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DcsVM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DcsVM) ProtoMessage() {}

func (x *DcsVM) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_model_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DcsVM.ProtoReflect.Descriptor instead.
func (*DcsVM) Descriptor() ([]byte, []int) {
	return file_dcs_model_proto_rawDescGZIP(), []int{0}
}

func (x *DcsVM) GetOsChoice() string {
	if x != nil {
		return x.OsChoice
	}
	return ""
}

type DcsDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DCS disks come in "fast" or "ultra fast". Just based on the numbers
	// published on their web site, I guess that "fast" is HDD and "ultra fast"
	// is SDD-based, at least as of Feb 2021.
	DiskType   string `protobuf:"bytes,1,opt,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty"`
	WithBackup bool   `protobuf:"varint,2,opt,name=with_backup,json=withBackup,proto3" json:"with_backup,omitempty"`
}

func (x *DcsDisk) Reset() {
	*x = DcsDisk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_model_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DcsDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DcsDisk) ProtoMessage() {}

func (x *DcsDisk) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_model_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DcsDisk.ProtoReflect.Descriptor instead.
func (*DcsDisk) Descriptor() ([]byte, []int) {
	return file_dcs_model_proto_rawDescGZIP(), []int{1}
}

func (x *DcsDisk) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *DcsDisk) GetWithBackup() bool {
	if x != nil {
		return x.WithBackup
	}
	return false
}

type DcsProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sla string `protobuf:"bytes,1,opt,name=sla,proto3" json:"sla,omitempty"` // Basic, Standard, Advanced. This is a DDC (dynamic data centre) wide setting.
}

func (x *DcsProject) Reset() {
	*x = DcsProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_model_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DcsProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DcsProject) ProtoMessage() {}

func (x *DcsProject) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_model_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DcsProject.ProtoReflect.Descriptor instead.
func (*DcsProject) Descriptor() ([]byte, []int) {
	return file_dcs_model_proto_rawDescGZIP(), []int{2}
}

func (x *DcsProject) GetSla() string {
	if x != nil {
		return x.Sla
	}
	return ""
}

// You must have one of these. Eco is free. I'm not sure if you can choose 'Backup'
// when you have just one gateway, but I've never tried.
type DcsGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"` // Eco, Fast, Ultra Fast, or Backup
}

func (x *DcsGateway) Reset() {
	*x = DcsGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dcs_model_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DcsGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DcsGateway) ProtoMessage() {}

func (x *DcsGateway) ProtoReflect() protoreflect.Message {
	mi := &file_dcs_model_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DcsGateway.ProtoReflect.Descriptor instead.
func (*DcsGateway) Descriptor() ([]byte, []int) {
	return file_dcs_model_proto_rawDescGZIP(), []int{3}
}

func (x *DcsGateway) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_dcs_model_proto protoreflect.FileDescriptor

var file_dcs_model_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x63, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x24, 0x0a, 0x05, 0x44, 0x63, 0x73, 0x56,
	0x4d, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x73, 0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x73, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x47,
	0x0a, 0x07, 0x44, 0x63, 0x73, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x22, 0x1e, 0x0a, 0x0a, 0x44, 0x63, 0x73, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6c, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x6c, 0x61, 0x22, 0x20, 0x0a, 0x0a, 0x44, 0x63, 0x73, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dcs_model_proto_rawDescOnce sync.Once
	file_dcs_model_proto_rawDescData = file_dcs_model_proto_rawDesc
)

func file_dcs_model_proto_rawDescGZIP() []byte {
	file_dcs_model_proto_rawDescOnce.Do(func() {
		file_dcs_model_proto_rawDescData = protoimpl.X.CompressGZIP(file_dcs_model_proto_rawDescData)
	})
	return file_dcs_model_proto_rawDescData
}

var file_dcs_model_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_dcs_model_proto_goTypes = []interface{}{
	(*DcsVM)(nil),      // 0: model.DcsVM
	(*DcsDisk)(nil),    // 1: model.DcsDisk
	(*DcsProject)(nil), // 2: model.DcsProject
	(*DcsGateway)(nil), // 3: model.DcsGateway
}
var file_dcs_model_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dcs_model_proto_init() }
func file_dcs_model_proto_init() {
	if File_dcs_model_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dcs_model_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DcsVM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_model_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DcsDisk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_model_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DcsProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dcs_model_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DcsGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dcs_model_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dcs_model_proto_goTypes,
		DependencyIndexes: file_dcs_model_proto_depIdxs,
		MessageInfos:      file_dcs_model_proto_msgTypes,
	}.Build()
	File_dcs_model_proto = out.File
	file_dcs_model_proto_rawDesc = nil
	file_dcs_model_proto_goTypes = nil
	file_dcs_model_proto_depIdxs = nil
}
